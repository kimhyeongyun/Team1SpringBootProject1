<?xml version="1.0" encoding="euc-kr" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.dao.ReviewDao">



   <select id="selectByPage" parameterType="pager"
      resultType="review">
      select review_id, review_score, review_title,
      review_content, review_date,
      user_id, enabled
      from (
      select rownum as
      rnum, review_id, review_score, review_title,
      review_content,
      review_date, user_id, enabled
      from (
      select review_id, review_score,
      review_title, review_content, review_date,
      user_id, enabled
      from review
      order by review_id desc
      )
      where rownum &lt;= #{endRowNo}
      )
      where rnum
      &gt;= #{startRowNo}
   </select>

   <select id="selectByPageByFilter" parameterType="pager"
      resultType="review">
      select review_id, review_score, review_title, review_content,
      review_date,
      user_id, enabled
      from (
      select rownum as rnum, review_id, review_score, review_title,
      review_content, review_date, user_id, enabled
      from (
      select review_id, review_score, review_title, review_content, review_date,
      user_id, enabled
      from review
      <if test="review_score== 1">
         where review_score = #{review_score}
      </if>
      <if test="review_score== 2">
         where review_score = #{review_score}
      </if>
      <if test="review_score== 3">
         where review_score = #{review_score}
      </if>
      <if test="review_score== 4">
         where review_score = #{review_score}
      </if>
      <if test="review_score== 5">
         where review_score = #{review_score}
      </if>
      
      order by review_id desc
      )
      where rownum &lt;= #{endRowNo}
      )
      where rnum &gt;= #{startRowNo}
   </select>

   <select id="selectByPageBySearch" parameterType="pager"
      resultType="review">
      select review_id, review_score, review_title, review_content,
      review_date,
      user_id, enabled
      from (
      select rownum as rnum, review_id,
      review_score, review_title,
      review_content, review_date, user_id,
      enabled
      from (
      select review_id, review_score, review_title,
      review_content, review_date,
      user_id, enabled
      from review
      <if test="searchType== '리뷰내용'">
         where review_content like '%'||#{searchContent}||'%'
      </if>
      <if test="searchType== '리뷰제목'">
         where review_title like '%'||#{searchContent}||'%'
      </if>
      <if test="searchType== '작성자아이디'">
         where user_id like '%'||#{searchContent}||'%'
      </if>
      order by review_id desc
      )
      where rownum &lt;= #{endRowNo}
      )
      where rnum
      &gt;= #{startRowNo}
   </select>

   <select id="countBySearch" resultType="int">
      select count(*) from review
      <if test="searchType== '리뷰내용'">
         where review_content like '%'||#{searchContent}||'%'
      </if>
      <if test="searchType== '리뷰제목'">
         where review_title like '%'||#{searchContent}||'%'
      </if>
      <if test="searchType== '작성자아이디'">
         where user_id like '%'||#{searchContent}||'%'
      </if>
   </select>

   <select id="countByFilter" resultType="int">
      select count(*) from
      review
      where review_score=#{review_score}
   </select>
   <select id="count" resultType="int">
      select count(*) from review
   </select>

   <select id="selectByReviewId" parameterType="int"
      resultType="review">
      select review_id, review_score, review_title,
      review_content, review_date,
      user_id, enabled
      from review
      where
      review_id=#{review_id}
   </select>

   <update id="update" parameterType="review">
      update review
      set
      review_title=#{review_title}, review_content=#{review_content},
      enabled=0
      where review_id=#{review_id}
   </update>
</mapper>