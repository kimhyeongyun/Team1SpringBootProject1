04/19 수업내용 ------------------------------------------------------------------------------------------------------------------

requesthttp 가 3개가 있다고 가정;

각각 시작행 헤더행 빈공간이 하나 있고 바디가 있다고 가정.


x-www-form-urlencoded;
name=xxx&desc=yyy&...


form-data(첨부파일이 있을 경우 반드시)
name:xxx
desc:yyy


raw/json()
{"name":"xxx", "desc":"yyy", }

결국은 RESTful 웹 어플리케이션 서버쪽에서 어떤 걸 요구하는냐에 따라서 Browser(client)에서 raw/json() or form-data or x-www-form-urlencoded이 달라짐

raw/json() 일 경우 : RESTful 웹 어플리케이션이 @RequestBody를 사용해서 안에 있는 내용을 파싱해야 , @RequestBody로 받아야.


@로그인
SPA 에서는 Session이 있어야하나 없어야하나, 인증처리방식을 어떻게 할 것이냐! 

로그인 인증 요청을 했다 -> server : session 방식이든 스프링 시큐리티를 하든 둘중 하나 한다고 가정
다시 쿠키를 전달받는다
(jsessionid)
다음부터 요청을 할때(jsessionid)를 이용해서 요청을 할 수 있다.
문제는 spa의 경우에는 다르게 사용하는 경우도 있다. 

html을 요청해서 page를 가져와서 
ajax로 데이터를 요청 

spa -> a server(html)
spa	-> b server(restful)
ajax로 요청을 하면 안됨. 여기서 받은 jsessionid(a server)로 b server로 데이터요청을 보낼때는 안됩니다.

그래서 어떤 방식을 써야하냐..
해결 방법1 : JWT(Json Web Token) : 인증 정보를 가지고 있는 하나의 데이터라고 보시면 됩니다.
동일한 도메인일 경우; 세션이나 시큐리티를 이용해서 그 쿠키를 보내주고 다시 그걸 보내서 자기가 인증이 되었다고 인증을 하는 것.
데이터 혹은 request head 부분에 실어서 보냅니다.
발행: A Server / 일반 응답으로 제공 / 클라이언트 쪽에서는 그걸 메모리 저장 또는 세션스토리지에다가 저장을 해요 / 발송: A,B Server 요청 헤더에 포함해서 보냅니다.
쿠키는 같은 도메인만 전송이 가능! 
SPA의 같은 경우 여러 서버중 일부 서버만 로그인이 되고 다른 서버와는 로그인이 안된 ~~

해결 방법2: URL Proxy(80) 서버가 있고 반대편에 A server(Reverse Proxy Server 8080), B server(Reverse Proxy Server 8081)가 있고
클라이언트는 URL Proxy 서버만 요청을 합니다. 클라이언트 입장에서 항상 서버는 프록시 하나입니다.
하지만 요청내용에 따라서 A(/boards /auth) or B(/products /auth)가 결정됨.
인증허가는 A에서 하고 인증사용은 B에서 한다고하면 A에다가 인증정보를 저장하면 B에서는 사용할 수 없죠? 
역시 JWT를 A에서 발행을 하고 Proxy에 주고 그걸 다시 client에 주고 나중에 그걸 가지고 b 서버로 가면 되겠죠?
이와 같은 서버를 여러분들이 만드냐? 아니다 이미 오픈소스 소프트웨어가 있습니다. -> NGINX!


세번째 방법: 세션 DB를 만들어서 세션만 저장할 수 있는 DB를 만듭니다.
A에서 성공한 인증정보를 DB에 저장을 하고, 보통 잘 쓰지는 않습니다. 


우리 과정에서는 JWT를 사용하는 방법만 할 겁니다.

기본적으로 제공되는 필터들에 jwt를 위한 것들은 시큐리티에 없어요.
jwt를 검사하는 필터! 이거를 하나 만들어서 어딘가에 끼워넣어야합니다..! 이 시점에 jwt를 검사를 합니다요
시큐리티는 전부다 필터로 구성되어 있습니다. 그 중 어떤 필터는 빼고 어떤 필터는 넣고 그래야합니다요.


-----------------------------------------------------------------------------------------------------------------------------------


